{"version":3,"sources":["libs/api-utils.ts","views/public/contracts/index.tsx","views/public/ddahs/index.tsx","views/public/postings/index.tsx","views/public/routes/index.tsx","public-entry.tsx"],"names":["API_URL","FETCH_INIT","credentials","headers","ApiError","resp","errorMessage","message","response","status","Error","captureStackTrace","ApiFetchError","path","statusText","_ensurePath","startsWith","_processFetchResponse","a","json","payload","apiGET","omitPrefix","fetch","method","apiPOST","body","JSON","stringify","capitalize","text","split","map","word","charAt","toLocaleUpperCase","slice","join","ContractView","params","useParams","url_token","React","useState","offer","setOffer","decision","setDecision","signature","setSignature","confirmationDialogVisible","setConfirmationDialogVisible","waiting","setWaiting","frozen","includes","submitDecision","data","window","location","reload","useEffect","details","console","warn","fetchOffer","Fragment","position_code","className","Button","href","role","id","checked","onChange","type","value","name","disabled","htmlFor","maxLength","e","target","title","onClick","src","Modal","show","onHide","Header","closeButton","Title","Body","Footer","variant","Spinner","animation","size","DdahView","ddah","setDdah","ConfirmDialog","submitDialogVisible","hideDialogAndResetData","applicationOpen","submissionError","confirmClicked","sessionTimeout","setSessionTimeout","then","utorid","Alert","PostingView","surveyJson","setSurveyJson","surveyPrefilledData","setSurveyPrefilledData","surveyData","setSurveyData","setSubmitDialogVisible","hasSubmitted","setHasSubmitted","setSubmissionError","setApplicationOpen","survey","prefilled_data","open_status","fetchSurvey","useMemo","Survey","applyTheme","navigationButton","showPreviewBeforeComplete","showQuestionNumbers","setTimeout","doComplete","onCompleting","add","result","options","allowComplete","showPreview","pages","page","elements","item","rows","length","validSurvey","log","answers","model","PublicRoutes","ConnectedApp"],"mappings":"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","file":"static/js/10.7e3f831c.chunk.js","sourcesContent":["/*\n * A collection of utility functions for interfacing with the API\n */\n\nimport { RawPosting, RawSession } from \"../api/defs/types\";\n\nconst API_URL = \"/api/v1\";\nconst FETCH_INIT: RequestInit = {\n    credentials: \"same-origin\",\n    headers: {\n        \"Content-Type\": \"application/json\",\n    },\n};\n\n/**\n * Error thrown whenever an api call returns with `status===\"error\"`\n *\n * @class ApiError\n * @extends {Error}\n */\nclass ApiError extends Error {\n    response: Partial<Response>;\n    status: Response[\"status\"];\n\n    constructor(resp: Pick<Response, \"status\"> & { message: string }) {\n        const errorMessage = resp.message;\n        super(errorMessage);\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, ApiFetchError);\n        }\n        this.response = resp;\n        this.status = resp.status;\n    }\n}\n\n/**\n * Error thrown whenever an api fetch request\n * returns with a status other than 200\n *\n * @class ApiFetchError\n * @extends {ApiError}\n */\nclass ApiFetchError extends ApiError {\n    constructor(resp: Response, path: string) {\n        const errorMessage = `Got status ${resp.status} ${\n            resp.statusText\n        } when fetching ${API_URL + path}`;\n        super({ ...resp, message: errorMessage });\n    }\n}\n\n// Ensure that `path` starts with a `/`\nfunction _ensurePath(path: string) {\n    return path.startsWith(\"/\") ? path : \"/\" + path;\n}\n\n// Process a `fetch` response from the API.\n// Successful responses from the API should be of\n// the form `{status: (\"success\"|\"error\"), message: \"...\", payload: ...}.\n// Throw an error on a failed HTTP request or a `status !== \"success\"`\n// response from the API.\nasync function _processFetchResponse(resp: Response, path: string) {\n    if (resp.status === 200) {\n        const json = await resp.json();\n        if (json.status !== \"success\") {\n            // If we got random JSON instead of {status: ..., message: ..., payload: ...}\n            // There will be no `json.message`. Provide a default message that will get\n            // overridden in this case\n            throw new ApiError({\n                message: \"Server response did not have `status === 'success`\",\n                ...json,\n            });\n        }\n        return json.payload;\n    }\n    // if we made it this far, there was a bad status\n    // returned during fetch\n    throw new ApiFetchError(resp, path);\n}\n\n/**\n * Do a GET request on the specified api route. This function has sophisticated automatic\n * type inference when using Typescript that works on constant string types (e.g., `apiGET(\"/sessions\")`). If you\n * want type inference when using template literals, you must declare the template literal `as const`\n * (e.g. ``apiGET(`/sessions` as const)``).\n *\n * If `omitPrefix == true`, then `/api/v1` will not be prepended to the start of\n * the request.\n *\n * @param path\n * @returns Promise containing the processed JSON response\n * @throws {(ApiError|ApiFetchError|Error)} Throws an error if the fetch fails or returns with `status===\"error\"`\n */\nasync function apiGET<Path extends string, Ret = ApiGetReturnType<Path>>(\n    path: Path,\n    omitPrefix = false\n): Promise<Ret> {\n    // remove a leading \"/\" if there is one in `path`\n    path = _ensurePath(path) as Path;\n    const resp = await fetch((omitPrefix ? \"\" : API_URL) + path, {\n        ...FETCH_INIT,\n        method: \"GET\",\n    });\n    return await _processFetchResponse(resp, path);\n}\n\n/**\n * Do a POST request on the specified api route. If `omitPrefix == true`, `/api/v1` will\n * not be inserted at the front of the URL\n *\n * @param path\n * @param  [body={}]\n * @returns Promise containing the processed JSON response\n * @throws {(ApiError|ApiFetchError|Error)} Throws an error if the fetch fails or returns with `status===\"error\"`\n */\nasync function apiPOST(path: string, body: any = {}, omitPrefix = false) {\n    // remove a leading \"/\" if there is one in `path`\n    path = _ensurePath(path);\n    const resp = await fetch((omitPrefix ? \"\" : API_URL) + path, {\n        ...FETCH_INIT,\n        method: \"POST\",\n        body: JSON.stringify(body),\n    });\n    return await _processFetchResponse(resp, path);\n}\n\nexport { API_URL, ApiError, ApiFetchError, apiGET, apiPOST };\n\n// XXX TODO: this is the start of a type system for typing API\n// requests. However, it appears not to be usable in TypeScript 4.2 with template literals,\n// which we use all over the code. See https://stackoverflow.com/questions/66739139/typescript-infer-temlate-lieral-from-const-template-literal/66739356#66739356\ntype PathVariable = string;\ntype ExtractPathVariable<T extends string> = T extends `:${string}`\n    ? PathVariable\n    : T;\n/**\n * A type that breaks `Path` up by `/` characters and leaves any part of\n * the path starting with `:` as a general string. For example,\n * `PathParts<\"/sessions/43/posts\"> == typeof [\"sessions\", \"43\", \"posts\"]` and\n * `PathParts<\"/sessions/:session_id/posts\"> == typeof [\"sessions\", string, \"posts\"]`.\n *\n * As such, `PathParts<\"/sessions/43/posts\"> extends PathParts<\"/sessions/:session_id/posts\">`,\n * and so `PathParts` can be used for Url route matching.\n */\ntype PathParts<Path extends string> = Path extends `/${infer Rest}`\n    ? PathParts<Rest>\n    : Path extends `${infer Start}/${infer Rest}`\n    ? [ExtractPathVariable<Start>, ...PathParts<`${Rest}`>]\n    : Path extends `${infer Item}`\n    ? [ExtractPathVariable<Item>]\n    : never;\n\ntype ApiGetReturnType<\n    Url extends string,\n    UrlPath = PathParts<Url>\n> = UrlPath extends PathParts<\"/:role/sessions\">\n    ? RawSession[]\n    : UrlPath extends PathParts<\"/:role/sessions/:/postings\">\n    ? RawPosting[]\n    : unknown;\n","import React from \"react\";\nimport { Button, Modal, Spinner } from \"react-bootstrap\";\nimport { useParams } from \"react-router-dom\";\nimport { RawOffer } from \"../../../api/defs/types\";\nimport { apiGET, apiPOST } from \"../../../libs/api-utils\";\n\nimport \"./view-offer.css\";\n\nfunction capitalize(text: string) {\n    return text\n        .split(/\\s+/)\n        .map((word) => word.charAt(0).toLocaleUpperCase() + word.slice(1))\n        .join(\" \");\n}\n\nexport function ContractView() {\n    const params = useParams<{ url_token?: string } | null>();\n    const url_token = params?.url_token;\n    const [offer, setOffer] = React.useState<RawOffer | null>(null);\n    const [decision, setDecision] = React.useState<\"accept\" | \"reject\" | null>(\n        null\n    );\n    const [signature, setSignature] = React.useState(\"\");\n    const [confirmationDialogVisible, setConfirmationDialogVisible] =\n        React.useState(false);\n    const [waiting, setWaiting] = React.useState(false);\n\n    // If the offer's status has been set to accepted/rejected/withdrawn,\n    // no further interaction with the offer is permitted.\n    const frozen = [\"accepted\", \"rejected\", \"withdrawn\"].includes(\n        offer?.status || \"\"\n    );\n\n    React.useEffect(() => {\n        async function fetchOffer() {\n            try {\n                const details: RawOffer | null = await apiGET(\n                    `/public/contracts/${url_token}/details`,\n                    true\n                );\n                setOffer(details);\n            } catch (e) {\n                console.warn(e);\n            }\n        }\n        fetchOffer();\n    }, [setOffer, url_token]);\n\n    async function submitDecision() {\n        if (decision == null) {\n            throw new Error(\"Cannot submit a `null` decision\");\n        }\n        const data = { decision, signature: signature || null };\n        await apiPOST(`/public/contracts/${url_token}/${decision}`, data, true);\n    }\n    async function confirmClicked() {\n        setWaiting(true);\n        await submitDecision();\n        setWaiting(false);\n        // @ts-ignore\n        window.location.reload(true);\n    }\n\n    if (url_token == null) {\n        return <React.Fragment>Unknown URL token.</React.Fragment>;\n    }\n\n    if (offer == null) {\n        return <React.Fragment>Loading...</React.Fragment>;\n    }\n\n    const position_code = offer.position_code;\n    const status = offer.status;\n\n    return (\n        <div className=\"contract-page\">\n            <div className=\"header\">\n                <h1>Offer of Teaching Assistantship for {position_code}</h1>\n            </div>\n            <div className=\"content\">\n                <div className=\"decision\">\n                    <h3>\n                        <Button\n                            href={`/public/contracts/${url_token}.pdf`}\n                            role=\"button\"\n                        >\n                            Download PDF\n                        </Button>\n                    </h3>\n                    <h1>\n                        Status:\n                        <span className={`${status} capitalize`}>\n                            {\" \"}\n                            {capitalize(status)}\n                        </span>\n                    </h1>\n                    <form id=\"decision\">\n                        <h3>\n                            I hereby accept the Teaching Assistantship position\n                            offered:\n                        </h3>\n                        <div className=\"decision-container\">\n                            <input\n                                checked={decision === \"accept\"}\n                                onChange={() => setDecision(\"accept\")}\n                                type=\"radio\"\n                                value=\"accept\"\n                                id=\"radio-accept\"\n                                name=\"decision\"\n                                disabled={frozen}\n                            />\n                            <label htmlFor=\"radio-accept\">Accept</label>\n                            <input\n                                checked={decision === \"reject\"}\n                                onChange={() => setDecision(\"reject\")}\n                                type=\"radio\"\n                                value=\"reject\"\n                                id=\"radio-reject\"\n                                name=\"decision\"\n                                disabled={frozen}\n                            />\n                            <label htmlFor=\"radio-reject\">Reject</label>\n                            <div className=\"signature\">\n                                <div>\n                                    <label htmlFor=\"signature_name\">\n                                        <p>\n                                            I confirm that I will be registered\n                                            as a University of Toronto student\n                                            or PDF on the date that this\n                                            appointment begins. I understand\n                                            that if I should cease to be\n                                            registered as a University of\n                                            Toronto student or PDF during the\n                                            period of this appointment, for any\n                                            reason other than convocation, I\n                                            must immediately notify my\n                                            supervisor, and my appointment may\n                                            be terminated.\n                                        </p>\n                                        <p>\n                                            To accept this contract, type your\n                                            initials:\n                                        </p>\n                                    </label>\n                                    <input\n                                        type=\"text\"\n                                        name=\"signature_name\"\n                                        id=\"signature_name\"\n                                        maxLength={300}\n                                        value={signature}\n                                        onChange={(e) =>\n                                            setSignature(e.target.value)\n                                        }\n                                    />\n                                    <div className=\"input-placeholder\">.</div>\n                                </div>\n                            </div>\n                            <Button\n                                disabled={\n                                    decision == null ||\n                                    (decision === \"accept\" && signature === \"\")\n                                }\n                                title={\n                                    decision == null\n                                        ? \"You must choose to accept or reject the contract in order to submit\"\n                                        : decision === \"accept\" &&\n                                          signature === \"\"\n                                        ? \"You must sign your name to accept the offer\"\n                                        : \"Submit your decision\"\n                                }\n                                onClick={() =>\n                                    setConfirmationDialogVisible(true)\n                                }\n                            >\n                                Submit\n                            </Button>\n                        </div>\n                    </form>\n                    <div className=\"admonishment\">\n                        <p>\n                            <b>Important:</b> In order to arrange payroll, if\n                            this is your first TA-ship or your SIN number has\n                            been changed since your last TA-ship, you must\n                            supply the department office with appropriate\n                            documentation.\n                        </p>\n                    </div>\n                </div>\n                <div className=\"contract-view\">\n                    <iframe\n                        title=\"Contract\"\n                        src={`/public/contracts/${url_token}`}\n                    ></iframe>\n                </div>\n            </div>\n            <Modal\n                show={confirmationDialogVisible}\n                onHide={() => setConfirmationDialogVisible(false)}\n            >\n                <Modal.Header closeButton>\n                    <Modal.Title>\n                        {capitalize(decision || \"\")} Offer\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    Are you sure you want to <b>{decision}</b> the TA-ship for\n                    this offer?\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button\n                        variant=\"secondary\"\n                        onClick={() => setConfirmationDialogVisible(false)}\n                    >\n                        Cancel\n                    </Button>\n                    <Button onClick={confirmClicked}>\n                        {waiting ? (\n                            <span className=\"spinner-surround\">\n                                <Spinner animation=\"border\" size=\"sm\" />\n                            </span>\n                        ) : null}\n                        {capitalize(decision || \"\")} Offer\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { Button, Modal, Spinner } from \"react-bootstrap\";\nimport { useParams } from \"react-router-dom\";\nimport { RawDdahDetails } from \"../../../api/defs/types\";\nimport { apiGET, apiPOST } from \"../../../libs/api-utils\";\n\nimport \"./view-ddah.css\";\n\nfunction capitalize(text: string) {\n    return text\n        .split(/\\s+/)\n        .map((word) => word.charAt(0).toLocaleUpperCase() + word.slice(1))\n        .join(\" \");\n}\n\nexport function DdahView() {\n    const params = useParams<{ url_token?: string } | null>();\n    const url_token = params?.url_token;\n    const [ddah, setDdah] = React.useState<RawDdahDetails | null>(null);\n    const [decision, setDecision] = React.useState<\"accept\" | null>(null);\n    const [signature, setSignature] = React.useState(\"\");\n    const [confirmationDialogVisible, setConfirmationDialogVisible] =\n        React.useState(false);\n    const [waiting, setWaiting] = React.useState(false);\n\n    // If the offer's status has been set to accepted/rejected/withdrawn,\n    // no further interaction with the offer is permitted.\n    const frozen = [\"acknowledged\"].includes(ddah?.status || \"\");\n\n    React.useEffect(() => {\n        async function fetchOffer() {\n            try {\n                const details: RawDdahDetails | null = await apiGET(\n                    `/public/ddahs/${url_token}/details`,\n                    true\n                );\n                setDdah(details);\n            } catch (e) {\n                console.warn(e);\n            }\n        }\n        fetchOffer();\n    }, [setDdah, url_token]);\n\n    async function submitDecision() {\n        if (decision == null) {\n            throw new Error(\"Cannot submit a `null` decision\");\n        }\n        const data = { decision, signature: signature || null };\n        await apiPOST(`/public/ddahs/${url_token}/${decision}`, data, true);\n    }\n    async function confirmClicked() {\n        setWaiting(true);\n        await submitDecision();\n        setWaiting(false);\n        // @ts-ignore\n        window.location.reload(true);\n    }\n\n    if (url_token == null) {\n        return <React.Fragment>Unknown URL token.</React.Fragment>;\n    }\n\n    if (ddah == null) {\n        return <React.Fragment>Loading...</React.Fragment>;\n    }\n\n    const position_code = ddah.position_code;\n    const status = ddah.status;\n\n    return (\n        <div className=\"contract-page\">\n            <div className=\"header\">\n                <h1>\n                    Description of Duties and Allocation of Hours for{\" \"}\n                    {position_code}\n                </h1>\n            </div>\n            <div className=\"content\">\n                <div className=\"decision\">\n                    <h3>\n                        <Button\n                            href={`/public/ddahs/${url_token}.pdf`}\n                            role=\"button\"\n                        >\n                            Download PDF\n                        </Button>\n                    </h3>\n                    <h1>\n                        Status:\n                        <span className={`${status} capitalize`}>\n                            {\" \"}\n                            {capitalize(status)}\n                        </span>\n                    </h1>\n                    <form id=\"decision\">\n                        <h3>\n                            Please acknowledge receipt of this Description of\n                            Duties and Allocation of Hours form below. If there\n                            are any issues with your described duties or you\n                            need further clarification, please contact your\n                            course supervisor(s).\n                        </h3>\n                        <div className=\"decision-container\">\n                            <input\n                                checked={decision === \"accept\"}\n                                onChange={() => setDecision(\"accept\")}\n                                type=\"radio\"\n                                value=\"accept\"\n                                id=\"radio-accept\"\n                                name=\"decision\"\n                                disabled={frozen}\n                            />\n                            <label htmlFor=\"radio-accept\">Acknowledge</label>\n                            <div className=\"signature\">\n                                <div>\n                                    <label htmlFor=\"signature_name\">\n                                        <p>\n                                            To confirm your acknowledgement,\n                                            please type your name below.\n                                        </p>\n                                    </label>\n                                    <input\n                                        type=\"text\"\n                                        name=\"signature_name\"\n                                        id=\"signature_name\"\n                                        maxLength={300}\n                                        value={signature}\n                                        onChange={(e) =>\n                                            setSignature(e.target.value)\n                                        }\n                                    />\n                                    <div className=\"input-placeholder\">.</div>\n                                </div>\n                            </div>\n                            <Button\n                                disabled={\n                                    decision == null ||\n                                    (decision === \"accept\" && signature === \"\")\n                                }\n                                title={\n                                    decision == null\n                                        ? \"You must choose to accept or reject the contract in order to submit\"\n                                        : decision === \"accept\" &&\n                                          signature === \"\"\n                                        ? \"You must sign your name to accept the offer\"\n                                        : \"Submit your decision\"\n                                }\n                                onClick={() =>\n                                    setConfirmationDialogVisible(true)\n                                }\n                            >\n                                Submit\n                            </Button>\n                        </div>\n                    </form>\n                    <div className=\"admonishment\"></div>\n                </div>\n                <div className=\"contract-view\">\n                    <iframe\n                        title=\"Contract\"\n                        src={`/public/ddahs/${url_token}`}\n                    ></iframe>\n                </div>\n            </div>\n            <Modal\n                show={confirmationDialogVisible}\n                onHide={() => setConfirmationDialogVisible(false)}\n            >\n                <Modal.Header closeButton>\n                    <Modal.Title>Acknowledge DDAH</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    Are you sure you want to <b>acknowledge</b> the DDAH?\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button\n                        variant=\"secondary\"\n                        onClick={() => setConfirmationDialogVisible(false)}\n                    >\n                        Cancel\n                    </Button>\n                    <Button onClick={confirmClicked}>\n                        {waiting ? (\n                            <span className=\"spinner-surround\">\n                                <Spinner animation=\"border\" size=\"sm\" />\n                            </span>\n                        ) : null}\n                        Acknowledge DDAH\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { apiGET, apiPOST } from \"../../../libs/api-utils\";\nimport * as Survey from \"survey-react\";\n//import \"survey-react/survey.css\";\nimport \"./survey.css\";\nimport { Alert, Button, Modal, Spinner } from \"react-bootstrap\";\n\n/**\n * Determine whether a survey.js survey has has at least one\n * position preference available. (Surveys that don't have any position\n * preferences available to be selected are considered invalid.)\n *\n * @param {*} surveyJson\n * @returns {boolean}\n */\nfunction validSurvey(surveyJson: any): boolean {\n    for (const page of surveyJson?.pages || []) {\n        for (const item of page?.elements || []) {\n            if (\n                item.name === \"position_preferences\" &&\n                item?.rows?.length > 0\n            ) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nfunction ConfirmDialog({\n    submitDialogVisible,\n    hideDialogAndResetData,\n    applicationOpen,\n    submissionError,\n    confirmClicked,\n    waiting,\n}: {\n    submitDialogVisible: boolean;\n    hideDialogAndResetData: (...args: any[]) => any;\n    applicationOpen: boolean;\n    submissionError: string | null;\n    confirmClicked: (...args: any[]) => any;\n    waiting: boolean;\n}) {\n    const [sessionTimeout, setSessionTimeout] = React.useState(false);\n    React.useEffect(() => {\n        // If it takes a long time for the user to fill out the posting, their shibboleth\n        // session might have timed out. To test for this, we make a dummy call to the backed right\n        // when the confirm dialog becomes visible. If the call fails, it means the session has timed out.\n        if (submitDialogVisible) {\n            apiGET(`/active_user`)\n                .then((resp: any) => {\n                    if (!resp.utorid) {\n                        throw new Error(\n                            \"Failed to get an authenticated response from the server\"\n                        );\n                    }\n                })\n                .catch(() => {\n                    setSessionTimeout(true);\n                });\n        } else {\n            setSessionTimeout(false);\n        }\n    }, [submitDialogVisible, setSessionTimeout]);\n\n    return (\n        <Modal show={submitDialogVisible} onHide={hideDialogAndResetData}>\n            <Modal.Header closeButton>\n                <Modal.Title>Submit Application</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {!applicationOpen ? (\n                    <Alert variant=\"warning\">\n                        The application window is currently not open. Any\n                        applications submitted outside of the application window\n                        may not be considered.\n                    </Alert>\n                ) : null}\n                {sessionTimeout && (\n                    <Alert variant=\"danger\">\n                        <b>Error:</b> Your session has timed out. Please refresh\n                        the browser and try again. (Your answers have not been\n                        saved, but you may copy-and-paste them to another\n                        document before refreshing.)\n                    </Alert>\n                )}\n                {submissionError ? (\n                    <Alert variant=\"danger\">\n                        <b>Error:</b> {submissionError} Please review your\n                        answers and make sure all questions are answered\n                        appropriately.\n                        <p className=\"mb-1\">\n                            If all your answers look correct, try\n                        </p>\n                        <ul className=\"mt-1\">\n                            <li>\n                                Refreshing the browser and trying to submit\n                                again.\n                            </li>\n                            <li>\n                                Submitting your application via Firefox or\n                                Chrome.\n                            </li>\n                        </ul>\n                    </Alert>\n                ) : (\n                    \"Are you sure you want to submit this TA application?\"\n                )}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={hideDialogAndResetData}>\n                    Cancel\n                </Button>\n                <Button onClick={confirmClicked} disabled={!!submissionError}>\n                    {waiting ? (\n                        <span className=\"spinner-surround\">\n                            <Spinner animation=\"border\" size=\"sm\" />\n                        </span>\n                    ) : null}\n                    Submit\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nexport function PostingView() {\n    const params = useParams<{ url_token?: string } | null>();\n    const url_token = params?.url_token;\n    const [surveyJson, setSurveyJson] = React.useState<any>(null);\n    const [surveyPrefilledData, setSurveyPrefilledData] =\n        React.useState<any>(null);\n    const [surveyData, setSurveyData] = React.useState<any>(null);\n    const [submitDialogVisible, setSubmitDialogVisible] = React.useState(false);\n    const [hasSubmitted, setHasSubmitted] = React.useState(false);\n    const [waiting, setWaiting] = React.useState(false);\n    const [submissionError, setSubmissionError] = React.useState<string | null>(\n        null\n    );\n    const [applicationOpen, setApplicationOpen] = React.useState(true);\n\n    React.useEffect(() => {\n        if (url_token == null) {\n            return;\n        }\n        async function fetchSurvey() {\n            try {\n                const details: {\n                    survey: any;\n                    prefilled_data: any;\n                    open_status: boolean;\n                } = await apiGET(`/public/postings/${url_token}`, true);\n                setSurveyJson(details.survey);\n                setSurveyPrefilledData(details.prefilled_data);\n                setApplicationOpen(details.open_status);\n            } catch (e) {\n                console.warn(e);\n            }\n        }\n        fetchSurvey();\n    }, [url_token, setSurveyJson, setSurveyPrefilledData, setApplicationOpen]);\n\n    const survey = React.useMemo(() => {\n        Survey.StylesManager.applyTheme(\"bootstrap\");\n        Survey.defaultBootstrapCss.navigationButton = \"btn btn-primary\";\n        const survey = new Survey.Model(surveyJson);\n        survey.showPreviewBeforeComplete = \"showAnsweredQuestions\";\n        survey.showQuestionNumbers = \"off\";\n\n        // The utorid is auto-filled when the user is actually taking a survey.\n        survey.data = surveyData || surveyPrefilledData;\n\n        // If the data has changed but we've finished the survey, make sure to set the survey to\n        // a finished state.\n        if (hasSubmitted) {\n            setTimeout(() => survey.doComplete(), 0);\n        }\n\n        return survey;\n    }, [surveyJson, surveyData, surveyPrefilledData, hasSubmitted]);\n\n    React.useEffect(() => {\n        // We only want to add this callback once when the survey is initialized\n        survey.onCompleting.add((result, options) => {\n            if (!hasSubmitted) {\n                options.allowComplete = false;\n                setSurveyData(result.data);\n                setSubmitDialogVisible(true);\n                setTimeout(() => survey.showPreview(), 0);\n            }\n        });\n    }, [survey, setSurveyData, setSubmitDialogVisible, hasSubmitted]);\n\n    if (url_token == null) {\n        return <React.Fragment>Unknown URL token.</React.Fragment>;\n    }\n\n    if (surveyJson == null || surveyPrefilledData == null) {\n        return <React.Fragment>Loading...</React.Fragment>;\n    }\n\n    if (!validSurvey(surveyJson)) {\n        return (\n            <Alert variant=\"warning\">\n                There are not positions that can be applied for at this time. An\n                administrator may update this posting in the future.\n            </Alert>\n        );\n    }\n\n    async function confirmClicked() {\n        console.log(\"Submitting data\", surveyData);\n        try {\n            setWaiting(true);\n            await apiPOST(\n                `/public/postings/${url_token}/submit`,\n                { answers: surveyData },\n                true\n            );\n            setHasSubmitted(true);\n            survey.doComplete();\n            setSurveyData(surveyPrefilledData);\n            setSubmitDialogVisible(false);\n            setSubmissionError(null);\n        } catch (e) {\n            console.warn(e);\n            setSubmissionError(\"Could not submit application.\");\n        } finally {\n            setWaiting(false);\n        }\n    }\n\n    function hideDialogAndResetData() {\n        survey.data = surveyData || survey.data;\n        setHasSubmitted(false);\n        setSubmitDialogVisible(false);\n        setSubmissionError(null);\n    }\n\n    return (\n        <React.Fragment>\n            <Survey.Survey model={survey} />\n            <ConfirmDialog\n                submitDialogVisible={submitDialogVisible}\n                hideDialogAndResetData={hideDialogAndResetData}\n                applicationOpen={applicationOpen}\n                submissionError={submissionError}\n                confirmClicked={confirmClicked}\n                waiting={waiting}\n            />\n        </React.Fragment>\n    );\n}\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { ContractView } from \"../contracts\";\nimport { DdahView } from \"../ddahs\";\nimport { PostingView } from \"../postings\";\n\nexport function PublicRoutes() {\n    return (\n        <Switch>\n            <Route path=\"/public/contracts/:url_token\">\n                <ContractView />\n            </Route>\n            <Route path=\"/public/ddahs/:url_token\">\n                <DdahView />\n            </Route>\n            <Route path=\"/public/postings/:url_token\">\n                <PostingView />\n            </Route>\n        </Switch>\n    );\n}\n","import React from \"react\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { PublicRoutes } from \"./views/public/routes\";\n\n/**\n * This is the entry point for public routes. Most components are not loaded\n * in this route.\n *\n * @export\n * @returns\n */\nexport default function ConnectedApp() {\n    return <PublicRoutes />;\n}\n"],"sourceRoot":""}